<?phprequire_once(realpath(dirname(__FILE__)) . '/../Lib/pagseguro/source/PagSeguroLibrary/PagSeguroLibrary.php');class PagSeguroService {        //Quem vai criar a conta no pagseguro???    private $pagSeguroEmail = "contato@rafaelsm.com.br";    private $pagSeguroToken = "DEE551FCCB774CD68E42CD55DD9D55C7";    //???            public function PagSeguroService(){        App::import('model','Destaque');        App::import('model','Usuario');        App::import('Helper', 'Html');    }        public function efetuarPagamento($destaque) {        $html = new HtmlHelper();           $destaqueObj = new Destaque();        $usuarioObj = new Usuario();        $destaque = $destaqueObj->findById($destaque["Destaque"]["id"]);        $paymentRequest = new PagSeguroPaymentRequest();        $paymentRequest->setReference($destaque["Destaque"]["id"]);        $paymentRequest->setCurrency("BRL");        $valor = (float) $destaque["Destaque"]["valor"];        $paymentRequest->addItem(001, "Destaque no site", 1, $valor, 0);        $codigoEntrega = PagSeguroShippingType::getCodeByType('NOT_SPECIFIED');        $usuario = $usuarioObj->findById($destaque["Anuncio"]["usuario_id"]);        $paymentRequest->setSender(                $usuario["Usuario"]["nome"], $usuario["Usuario"]["email"], "35", "88720988"        );        $paymentRequest->setRedirectUrl("http://www.rafaelsm.com.br/loja1/?action=PagSeguro");        try {            $credentials = new PagSeguroAccountCredentials($this->pagSeguroEmail, $this->pagSeguroToken);            $url = $paymentRequest->register($credentials);            return $url;        } catch (PagSeguroServiceException $e) {            die($e->getMessage());        }    }    public function receberNotificacoes($code, $type) {        $credentials = new PagSeguroAccountCredentials($this->pagSeguroEmail, $this->pagSeguroToken);        $transaction = PagSeguroNotificationService::checkTransaction(                        $credentials, $code // código de notificação          );        $code = $transaction->getCode();        switch ($type) {            case 'transaction':                self::receberNotificacaoByID($code);                break;            case 'payment':                self::receberNotificacaoByID($code);                break;            default:                LogPagSeguro::error("Unknown notification type [" . $type . "]");                break;        }        self::printLog($type);    }    public function receberNotificacaoByID($code) {        $credentials = new PagSeguroAccountCredentials($this->pagSeguroEmail, $this->pagSeguroToken);        try {            $transaction = PagSeguroTransactionSearchService::searchByCode($credentials, $code);            $status = $transaction->getStatus()->getValue();            switch ($status) {                case 1:                    $estado_pedido = 'Aguardando Pagamento';                    break;                case 2:                    $estado_pedido = 'Em análise';                    break;                case 3:                    $estado_pedido = 'Paga';                    break;                case 4:                    $estado_pedido = 'Disponível';                    break;                case 5:                    $estado_pedido = 'Em disputa';                    break;                case 6:                    $estado_pedido = 'Devolvida';                    break;                case 7:                    $estado_pedido = 'Cancelada';                    break;                default:                    $estado_pedido = 'Aguardando Pagamento';            }            $id = $transaction->getCode();            $ref = $transaction->getReference();            $paymentMethod = $transaction->getPaymentMethod();            $destaqueObj = new Destaque();            $destaque = $destaqueObj->findById($ref);            $destaque["transacao_id"] = $id;            $destaque["situacao"] = $estado_pedido;                      $destaqueObj->save($destaque);            //        } catch (PagSeguroServiceException $e) {            die($e->getMessage());        }    }    private function printLog($strType = null) {        $count = 4;        echo "<h2>Receive notifications</h2>";        if ($strType) {            echo "<h4>notifcationType: $strType</h4>";        }        echo "<p>Last <strong>$count</strong> items in <strong>log file:</strong></p><hr>";        echo LogPagSeguro::getHtml($count);    }}